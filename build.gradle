plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.9'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'com.souf'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()

    maven {url "https://aws.oss.sonatype.org/content/repositories/releases/"}
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    testImplementation 'org.springframework.security:spring-security-test'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // PostgreSQL
    runtimeOnly 'org.postgresql:postgresql'

    // s3
    implementation platform("software.amazon.awssdk:bom:2.32.14") // or 최신
    implementation 'software.amazon.awssdk:s3'

    // Querydsl 추가 (Spring boot 3.x 이상)
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // cache
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.redisson:redisson-spring-boot-starter:3.17.7'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

    // Image Processing
    implementation "com.sksamuel.scrimage:scrimage-webp:4.3.0"

    // stomp
    implementation 'io.projectreactor.netty:reactor-netty:1.1.12'

    // AWS ses service
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'com.amazonaws:aws-java-sdk-ses:1.12.3'

//    // opensearch
//    implementation 'org.opensearch.client:opensearch-java:2.19.0'
//    implementation 'com.fasterxml.jackson.core:jackson-databind'
//    // implementation("org.opensearch.client:opensearch-rest-client:2.19.0") 마스터 계정 사용 시
//    implementation 'software.amazon.awssdk:apache-client'
    implementation 'software.amazon.awssdk:sts'
//
//    implementation 'software.amazon.aws-request-signing-apache-interceptor:aws-request-signing-apache-interceptor:1.0.0'
//
//    implementation 'org.apache.httpcomponents.client5:httpclient5:5.1.3'
//
    // SigV4 interceptor를 사용하고 싶다면 (Apache HttpClient-based RestClient 전용)
    implementation 'software.amazon.awssdk:opensearch'

    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'software.amazon.awssdk:apache-client'

    implementation 'org.apache.httpcomponents.client5:httpclient5:5.3.1'
    implementation 'org.apache.httpcomponents.core5:httpcore5:5.2.5'
    implementation 'io.github.acm19:aws-request-signing-apache-interceptor:3.0.0'
    implementation 'software.amazon.awssdk:auth'
    implementation 'software.amazon.awssdk:http-auth-aws'
    implementation 'software.amazon.awssdk:regions'

    // AWS ECS
    implementation 'software.amazon.awssdk:ecs'

    // AWS SQS
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.538'
    implementation platform("io.awspring.cloud:spring-cloud-aws-dependencies:3.1.0")
    implementation "io.awspring.cloud:spring-cloud-aws-starter-sqs"

    // slack
    implementation("com.slack.api:bolt:1.18.0")
    implementation("com.slack.api:bolt-servlet:1.18.0")
    implementation("com.slack.api:bolt-jetty:1.18.0")

    // amqp
    implementation 'org.springframework.boot:spring-boot-starter-amqp'

}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // test 뒤에 jacocoTestReport가 실행되도록 선언
}

// querydsl 추가 시작
def querydslDir = "src/main/generated"

sourceSets {
    main.java.srcDir querydslDir
}
tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

clean.doLast {
    file(querydslDir).deleteDir()
}
// querydsl 추가 끝

// jacoco 추가 시작
jacoco {
    toolVersion = "0.8.12"
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required = true
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir("jacocoHtml")
    }

    // 불필요한 클래스 커버리지 제외
    def excludes = [
            '**/*Application*',
            '**/config/**',
            '**/dto/**',
            '**/exception/**',
            '**/generated/**',
            '**/Q**',
            '**/*$*',
            '**/meta/**',
            '**/annotation/**'
    ]

    classDirectories.setFrom(
            files(classDirectories.files.collect {
                dir -> fileTree(dir: dir, exclude: excludes)
            })
    )
}

// 측정치를 달성했는지 임계치 검증
//jacocoTestCoverageVerification {
//    violationRules {
//        rule {
//            excludes = [
//                    '**/*Application*',
//                    '**/config/**',
//                    '**/dto/**',
//                    '**/exception/**',
//                    '**/generated/**',
//                    '**/Q**',
//                    '**/*$*',
//                    '**/meta/**',
//                    '**/annotation/**'
//            ]
////            limit {
////                minimum = 0.65
////            }
//        }
//    }
//}
//check.dependsOn jacocoTestCoverageVerification